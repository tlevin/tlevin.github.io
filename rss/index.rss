<rss xmlns:dc="http://purl.org/dc/elements/1.1/" xmlns:content="http://purl.org/rss/1.0/modules/content/" xmlns:atom="http://www.w3.org/2005/Atom" xmlns:media="http://search.yahoo.com/mrss/" version="2.0"><channel><title>Todd Levin</title><description>Things that intrigue me</description><link>http://localhost:2368/</link><generator>Ghost 0.7</generator><lastBuildDate>Fri, 13 Nov 2015 22:14:21 GMT</lastBuildDate><atom:link href="http://localhost:2368/rss/" rel="self" type="application/rss+xml"/><ttl>60</ttl><item><title>Building a simple Chrome Extension</title><description>&lt;p&gt;I was recently able to make a chrome extension as a personal project and I was surprised at the ease of making something work.  I wanted to share what I found to be true and where to start.&lt;/p&gt;

&lt;h2 id="easymodeyo"&gt;Easymode: Yo&lt;/h2&gt;

&lt;p&gt;If you are unfamiliar with a Yeoman generator, it is&lt;/p&gt;</description><link>http://localhost:2368/building-a-simple-chrome-extension/</link><guid isPermaLink="false">e80baa9f-8d89-40ce-8cc1-04eb03701762</guid><dc:creator>Todd Levin</dc:creator><pubDate>Fri, 13 Nov 2015 22:13:51 GMT</pubDate><content:encoded>&lt;p&gt;I was recently able to make a chrome extension as a personal project and I was surprised at the ease of making something work.  I wanted to share what I found to be true and where to start.&lt;/p&gt;

&lt;h2 id="easymodeyo"&gt;Easymode: Yo&lt;/h2&gt;

&lt;p&gt;If you are unfamiliar with a Yeoman generator, it is a tool to build out a basic scaffold for a project.  It allows a developer to bypass the tedious chores of making folder structures, the ability to inject dependencies and even to have automated testing out of the box.&lt;/p&gt;

&lt;p&gt;I found a great generator for chrome extensions called simply &lt;a href="https://github.com/yeoman/generator-chrome-extension"&gt;generator-chrome-extension&lt;/a&gt;.  It installs dependencies for the program with a simple &lt;code&gt;npm install -g generator-chrome-extension&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;Next make and enter a folder for your project and run &lt;code&gt;yo chrome-extension&lt;/code&gt; and watch the magic.  It will walk you through general setup and then give you a simple scaffold to build your extension with.&lt;/p&gt;

&lt;h3 id="whatisrequiredforachromeextension"&gt;What is required for a Chrome Extension?&lt;/h3&gt;

&lt;p&gt;So you want to do it the hard way?&lt;/p&gt;

&lt;p&gt;Good!  Let's look into what is needed for a basic chrome extension to work.&lt;/p&gt;

&lt;p&gt;All you need for a chrome extension is a manifest.json file where you define description, icons, permissions as well as what type of Chrome Extension you are building.  I chose to use a popup and there is good &lt;a href="https://developer.chrome.com/extensions"&gt;documentation here&lt;/a&gt; on how to build your manifest.json file.&lt;/p&gt;

&lt;p&gt;After you declare your extension and permissions, you just need to develop the extension.  Guess what?  A Chrome extension popup is simply a html page so you can use any front-end technology to build a responsive, feature rich document.  I personally used angular for my front-end on this project and it came out pretty well.&lt;/p&gt;

&lt;p&gt;If all goes well you can load your extension into chrome as described in the &lt;a href="https://developer.chrome.com/extensions/getstarted"&gt;getting started docs.&lt;/a&gt;&lt;/p&gt;

&lt;h4 id="wherecanigetmoreinformation"&gt;Where can I get more information?&lt;/h4&gt;

&lt;p&gt;&lt;a href="https://developer.chrome.com/extensions"&gt;Chrome developer documentation on extensions&lt;/a&gt; &lt;/p&gt;

&lt;p&gt;&lt;a href="https://css-tricks.com/colorpeek-part-2-building-first-chrome-extension/"&gt;Basic tutorial on building an extension&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://www.youtube.com/playlist?list=PLCA101D6A85FE9D4B"&gt;Chrome development videos from engineers at Google&lt;/a&gt;&lt;/p&gt;</content:encoded></item><item><title>Getting started with CoffeScript</title><description>&lt;p&gt;Everyone needs a little coffee to get going in the morning, but what is CoffeeScript?  CoffeeScript is a programming language built off the principles of JavaScript with a heavy syntax influence from Ruby.&lt;/p&gt;

&lt;p&gt;The goal of CoffeeScript is to make machine readable code that is also human readable.  This helps&lt;/p&gt;</description><link>http://localhost:2368/getting-started-with-coffescript/</link><guid isPermaLink="false">93837e66-acc2-470d-84e2-cb2334b0b5e0</guid><dc:creator>Todd Levin</dc:creator><pubDate>Mon, 26 Oct 2015 14:38:41 GMT</pubDate><content:encoded>&lt;p&gt;Everyone needs a little coffee to get going in the morning, but what is CoffeeScript?  CoffeeScript is a programming language built off the principles of JavaScript with a heavy syntax influence from Ruby.&lt;/p&gt;

&lt;p&gt;The goal of CoffeeScript is to make machine readable code that is also human readable.  This helps a lot in software engineering since often times you are not working on your own code, and even if you are, you may have written it months ago.  What if you could read your code like a book?  CoffeeScript aims to be as close to that as possible.&lt;/p&gt;

&lt;p&gt;Ready to write some CoffeeScript?  Hold on there sparky, you are going to need a few things first and you need to know something about the language as well.  CoffeeScript is a compiled language meaning that before the browser can run your awesome new app, you need to convert it to JavaScript.  Sounds like hard work, but fear not, CoffeeScript has that covered.&lt;/p&gt;

&lt;h2 id="gettingstarted"&gt;Getting Started&lt;/h2&gt;

&lt;p&gt;In order to compile your code after you write it in CoffeeScript you need to instal CoffeeScript.  If you haven't already installed Node on your machine, please checkout the post &lt;a href="http://www.codydaig.me/installing-node-with-nvm/"&gt;here&lt;/a&gt; on installing Node using NVM.&lt;/p&gt;

&lt;p&gt;The next step I would suggest is get syntax highlighting for CoffeeScript for your favorite text editor.  I use Sublime so for me I found my syntax highlighter through &lt;a href="https://packagecontrol.io/"&gt;Sublime Package Control&lt;/a&gt;.  If you don't have that I would highly suggest it because it makes installing plugins for Sublime painless.  The CoffeeScript syntax highlighter I use is called &lt;a href="https://github.com/aponxi/sublime-better-coffeescript"&gt;Better CoffeeScript&lt;/a&gt;&lt;/p&gt;

&lt;h2 id="compileasyougo"&gt;Compile as you go&lt;/h2&gt;

&lt;pre&gt;&lt;code&gt;coffee --output compiled --map --watch --compile ./
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Got your attention, now didn't I?  Running this command in the root of your project will make all the CoffeeScript magic happen.  Let's take a look at what each of these commands actually mean. &lt;code&gt;coffee&lt;/code&gt; is the keyword for &lt;code&gt;coffee-script&lt;/code&gt; and everything after it is your command options. &lt;code&gt;--output&lt;/code&gt; or &lt;code&gt;-o&lt;/code&gt; for short tells CoffeeScript to write all of the compiled JavaScript to the provided folder name.  In this case it is 'compiled'.&lt;/p&gt;

&lt;p&gt;&lt;code&gt;--map&lt;/code&gt; or &lt;code&gt;-m&lt;/code&gt; provides source code mapping from CoffeeScript to JavaScript and back again.  Clicking on a line of compiled JavaScript in your devtools will select the corresponding line in your CoffeeScript.  Very nice for matching uncaught exceptions to their original lines.&lt;/p&gt;

&lt;p&gt;&lt;code&gt;--watch&lt;/code&gt; or &lt;code&gt;--w&lt;/code&gt; is your watch option, this means that it will watch the provided file or folder and any changes to it will be immediately compiled.  This combined with &lt;a href="https://github.com/tapio/live-server"&gt;live-server&lt;/a&gt; and you can have dynamically updated webpages during development with CoffeeScript.  &lt;code&gt;./&lt;/code&gt; simply selects the root and all subfolders in your project.  Kind of the shotgun approach but if you are dealing with multiple .coffee files in your project, you will like that option.&lt;/p&gt;

&lt;h2 id="syntaxdifferences"&gt;Syntax differences&lt;/h2&gt;

&lt;p&gt;I won't go into the details of how CoffeeScript is different from JavaScript other than to show you this graphic I shamelessly took from &lt;a href="http://coffeescript.org"&gt;CoffeeScript.org&lt;/a&gt;. This is a quick side by side comparison with several of the more common JavaScript concepts.  On the left is CoffeeScript, on the right is the corresponding JavaScript. &lt;br&gt;
&lt;img src="http://localhost:2368/content/images/2015/10/Screen-Shot-2015-10-26-at-7-13-10-AM.png" alt=""&gt;&lt;/p&gt;

&lt;hr&gt;

&lt;h3 id="thefutureincoffeescript"&gt;The Future in CoffeeScript&lt;/h3&gt;

&lt;p&gt;I personally enjoyed learning CoffeeScript and would consider using it in the future.  I enjoyed the brevity of the code, the simplicity of it's design and the fact that it forces you to be very clear in your intent with the use of whitespace to declare functional blocks.&lt;/p&gt;

&lt;p&gt;Plus if you ever get stuck on what the correct CoffeeScript to use as you are initially learning it, there is always &lt;a href="http://js2.coffee"&gt;JS2.coffee&lt;/a&gt; which is a great site that does a translation from JavaScript to CoffeeScript.  I would not suggest learning CoffeeScript at the expense of learning JavaScript because in the end, CoffeeScript is simply a syntactic overlay on the core of what JavaScript is. &lt;/p&gt;</content:encoded></item><item><title>Learning subclasses with HR-ogger</title><description>&lt;p&gt;I had the pleasure of diving deep into the subclass pseudoclassical instantiation pattern with a project to build a simple interactive stage to move objects around on.&lt;/p&gt;

&lt;p&gt;So, what did I do?  I turned it into a Frogger game.  I created a base class called &lt;code&gt;Obstacle&lt;/code&gt; and had &lt;code&gt;Vehicles&lt;/code&gt;, &lt;code&gt;Frogger&lt;/code&gt;&lt;/p&gt;</description><link>http://localhost:2368/learning-subclasses-with-frogger/</link><guid isPermaLink="false">0a23ac42-3059-4e18-b4a8-554ce3890986</guid><dc:creator>Todd Levin</dc:creator><pubDate>Fri, 16 Oct 2015 04:31:50 GMT</pubDate><content:encoded>&lt;p&gt;I had the pleasure of diving deep into the subclass pseudoclassical instantiation pattern with a project to build a simple interactive stage to move objects around on.&lt;/p&gt;

&lt;p&gt;So, what did I do?  I turned it into a Frogger game.  I created a base class called &lt;code&gt;Obstacle&lt;/code&gt; and had &lt;code&gt;Vehicles&lt;/code&gt;, &lt;code&gt;Frogger&lt;/code&gt;, and &lt;code&gt;RockObstacle&lt;/code&gt; as subclasses which inherited some basic methods and properties.&lt;/p&gt;

&lt;p&gt;The basic formula for creating a subclass in the pseudoclassical pattern is to: &lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;&lt;p&gt;Call the parent class, set the context with the keyword  &lt;code&gt;this&lt;/code&gt; and pass in any parameters that are taken into the subclass that are referenced by inherited properties.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Create a delegation relationship between the subclass prototype and the parent class prototype using Object.create()&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Point the subclass prototype constructor back to itself to maintain a proper relationship between instances and the subclass&lt;/p&gt;&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;This is how it looks in code: &lt;/p&gt;

&lt;pre&gt;&lt;code&gt;var SubClass = function(param1, param2) {

   //call superclass, apply context and pass parameters if needed
  SuperClass.call(this, param1, param2);
};

//Set the subclass prototype and form a delegation relationship
SubClass.prototype = Object.create(SuperClass.prototype);

//Point the constructor back at subclass
SubClass.prototype.constructor = SubClass;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Subclassing makes it easier to create distinct classes that share similar properties and methods.  It helped me abstract the relationships between components in my project.  It was my first foray into application design where I had to plan out inheritance and delegation prior to starting to actually code.&lt;/p&gt;

&lt;p&gt;This project introduced me to using audio in HTML5, CSS animations, and the complexities of building applications from idea to implementation.  The challenge to make a viable product in only two days pushed me to learn more jQuery, implement object collision and deal with the perpetual challenges of CSS.&lt;/p&gt;

&lt;p&gt;You can download and play my game on my &lt;a href="https://toddlevin.net/frogger-game"&gt;site&lt;/a&gt;.&lt;/p&gt;</content:encoded></item><item><title>Evaluating Performance of Instantiation Patterns</title><description>&lt;h3 id="whatdoesinstantiationmean"&gt;What does instantiation mean?&lt;/h3&gt;

&lt;p&gt;In object orientated programming when you create an object from a constructor function that passes along shared properties and methods it is called instantiation.  The object that is created is referred to as an instance of its constructor.  Other programming languages refer to the constructor function&lt;/p&gt;</description><link>http://localhost:2368/evaluating-javascript-instantiation-styles/</link><guid isPermaLink="false">7421a3d0-894d-467c-90f0-a2444ca20412</guid><dc:creator>Todd Levin</dc:creator><pubDate>Sat, 10 Oct 2015 01:22:50 GMT</pubDate><media:content url="http://localhost:2368/content/images/2015/10/IMG_0151.jpg" medium="image"/><content:encoded>&lt;h3 id="whatdoesinstantiationmean"&gt;What does instantiation mean?&lt;/h3&gt;

&lt;img src="http://localhost:2368/content/images/2015/10/IMG_0151.jpg" alt="Evaluating Performance of Instantiation Patterns"&gt;&lt;p&gt;In object orientated programming when you create an object from a constructor function that passes along shared properties and methods it is called instantiation.  The object that is created is referred to as an instance of its constructor.  Other programming languages refer to the constructor function as a class.&lt;/p&gt;

&lt;p&gt;Javascript doesn't force the programming into a set process to create a class and instead supports four different instantiation patterns to achieve this result.&lt;/p&gt;

&lt;h3 id="thefourpatternstoinstantiateanobject"&gt;The four patterns to instantiate an object&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;functional&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;functional with shared methods&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;prototypal&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;pseudoclassical&lt;/strong&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;hr&gt;

&lt;h4 id="whatarewecheckingwhenweevaluateeachpattern"&gt;What are we checking when we evaluate each pattern?&lt;/h4&gt;

&lt;p&gt;There are two aspects to evaluate a program (and in this case the act of instantiation).  I used Chrome devtools to collect a CPU profile which records the time in miliseconds that a specific function takes.  A heap snapsot looks at the memory allocation of each object created on the page measured in megabytes.  For more information about performance testing using Chrome, check out &lt;a href="https://developers.google.com/web/tools/profile-performance/rendering-tools/js-execution"&gt;Speed Up JavaScript Execution&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;Performance of an application is measured in both time or space and often you have to choose which to optimize for.  Learning how the devtools profiler records performance was valuable to understanding how design choices affects the runtime.  &lt;/p&gt;

&lt;hr&gt;

&lt;h4 id="thetestingenvironment"&gt;The testing environment&lt;/h4&gt;

&lt;p&gt;Let me present the wonderful interface that I built to test an implementation of stack and queue constructors.&lt;/p&gt;

&lt;p&gt;&lt;img src="http://localhost:2368/content/images/2015/10/Screen-Shot-2015-10-09-at-9-52-30-PM.png" alt="Evaluating Performance of Instantiation Patterns"&gt;&lt;/p&gt;

&lt;p&gt;Great, I know.  The JavaScript that was running to create the tests does all of the work behind the scenes.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;var queues = [];
var stacks = [];
$(".createStack").click(function() {
    stacks = [];
    while(stacks.length &amp;lt; 100000){
        stacks.push(Stack());
        stacks[stacks.length - 1].push(Math.random());
    }
});
$(".createQueue").click(function() {
    queues = [];
    while(queues.length &amp;lt; 100000){
        queues.push(Queue());
        queues[queues.length - 1].enqueue(Math.random());
    }
});
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;It made an array of objects that were instantiated by the pattern being tested. It then called a push method to add to each stack and an enqueue method to add to each queue a random generated number. &lt;/p&gt;

&lt;p&gt;Adding an operation on top of instantiation would not affect the result, because adding values to it is a constant time and space operation in this implementation.  The additional jQuery operations were all identical for each test so they can be considered a constant as well.&lt;/p&gt;

&lt;hr&gt;

&lt;h2 id="theresults"&gt;The Results&lt;/h2&gt;

&lt;h5 id="cputime"&gt;CPU time&lt;/h5&gt;

&lt;p&gt;&lt;img src="http://localhost:2368/content/images/2015/10/Screen-Shot-2015-10-09-at-6-14-45-PM-1.png" alt="Evaluating Performance of Instantiation Patterns"&gt;&lt;/p&gt;

&lt;p&gt;Ok, first thing you'll notice is functional shared is off the charts.  I determined that based on the cpu profiles that each test had generated the problem was due to the extend function that I used for this pattern.  There was some flaw in how the _.extend from the underscore library was reporting in the CPU profiles I collected.&lt;/p&gt;

&lt;p&gt;Of the tests that were ran, pseudoclassical instantiation had a faster run time than the others.  Note that the test script tested it based on 100,000 instances of stack and queue and the execution times were under 1200 ms for all patterns of instantiation.&lt;/p&gt;

&lt;hr&gt;

&lt;h5 id="memoryusage"&gt;Memory usage&lt;/h5&gt;

&lt;p&gt;&lt;img src="http://localhost:2368/content/images/2015/10/Screen-Shot-2015-10-09-at-6-09-41-PM-1.png" alt="Evaluating Performance of Instantiation Patterns"&gt;&lt;/p&gt;

&lt;p&gt;I noticed that due to the similar data storage type used to implement both stack and queue that there was no noticeable difference in the actual memory usage.  This was expected since they are similar data structures, just with different rules and methods governing access.&lt;/p&gt;

&lt;p&gt;The reason functional instantiation was close to double the memory usage is because all methods on the constructor have to be declared in every instance it generates.  This is unlike prototypal and pseudoclassical which use prototype inheritance to pass along the methods, or functional shared which references a shared object of methods.&lt;/p&gt;

&lt;hr&gt;

&lt;h4 id="resultstake2"&gt;Results (take 2!)&lt;/h4&gt;

&lt;p&gt;Not satisfied with flawed data I found out about alternative testing tools to simplify the performance tests.  Not that I didn't enjoy the process of generating my own HTML tester and profile scripts, but it isn't efficient.  Efficiency is the whole idea for this post!&lt;/p&gt;

&lt;p&gt;I tried out the site &lt;a href="http://jsperf.com"&gt;jsperf.com&lt;/a&gt; and found that testing was easy to setup, and the interface was simple.  Here is my &lt;a href="http://jsperf.com/instantiationjs"&gt;test setup&lt;/a&gt; and the results were in line with my own testing.  I fixed the extend for functional shared and it now performs in line with expectations.&lt;/p&gt;

&lt;p&gt;&lt;img src="http://localhost:2368/content/images/2015/10/Screen-Shot-2015-10-11-at-3-07-36-PM-1.png" alt="Evaluating Performance of Instantiation Patterns"&gt;&lt;/p&gt;

&lt;p&gt;My takeaway from running this second test was the act of testing itself.  I learned valuable lessons about the concept of using various tools to get a good snapshot of how your implementation performs.&lt;/p&gt;

&lt;p&gt;Functional instantiation performed poorly here and I thought this was an outlier similar to the error with functional shared in my initial testing.  I checked with other sources that did similar testing and found it to be close to what they surmised.  &lt;a href="http://www.shanemkeller.com/instantiation_patterns_and_execution_speed-2/"&gt;Source&lt;/a&gt;&lt;/p&gt;

&lt;h3 id="insummary"&gt;In summary&lt;/h3&gt;

&lt;p&gt;Depending on the scale of the application, and the complexity of the constructor, instantiation patterns will not make a noticeable difference in its performance.  Despite the difference of 40-50%, the slowest pattern instantiates at hundreds of thousands of objects a second in my tests. If optimizing for time, pseudoclassical has an edge and if optimizing for space, I would avoid functional instantiation.&lt;/p&gt;

&lt;p&gt;It has an impact on your program, but it will most likely not affect the user's experience.  This makes it far more a personal choice.  On a personal note, I like the pseudoclassical pattern better, and I am even working on remembering to use the keyword &lt;code&gt;new&lt;/code&gt; in my code!&lt;/p&gt;

&lt;p&gt;Thanks to &lt;a href="https://github.com/bjarkestaun"&gt;Bjarke Staun-Olsen&lt;/a&gt; for his help on the implementation and testing as well as to the good people at &lt;a href="http://www.hackreactor.com"&gt;Hack Reactor&lt;/a&gt; for providing the learning environment.&lt;/p&gt;</content:encoded></item><item><title>Twas the Night Before Hack Reactor</title><description>&lt;p&gt;Ok, lets be a little less serious now.  In the spirit of "A visit from Saint Nicholas" by Clement Clark Moore, I present 'Twas the Night Before Hack Reactor'.&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;Twas the night before Hack Reactor, when all through the slack. &lt;br&gt;
  Not a cohort was sleeping, still working on the jQuery&lt;/p&gt;&lt;/blockquote&gt;</description><link>http://localhost:2368/twas-the-night-before-hack-reactor/</link><guid isPermaLink="false">3706aa9c-17dd-4095-b0a1-1edb27e80882</guid><category>Hack Reactor</category><category>Funny</category><dc:creator>Todd Levin</dc:creator><pubDate>Mon, 05 Oct 2015 06:08:00 GMT</pubDate><content:encoded>&lt;p&gt;Ok, lets be a little less serious now.  In the spirit of "A visit from Saint Nicholas" by Clement Clark Moore, I present 'Twas the Night Before Hack Reactor'.&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;Twas the night before Hack Reactor, when all through the slack. &lt;br&gt;
  Not a cohort was sleeping, still working on the jQuery track, &lt;br&gt;
  The energy bars were gathered with care, &lt;br&gt;
  In the hopes of not falling asleep there; &lt;br&gt;
  The cohort were nestled all snug with their laptops in their beds, &lt;br&gt;
  While visions of software engineering danced in their heads; &lt;br&gt;
  And me in my plaid and cap, &lt;br&gt;
  Had just settled in for a nap; &lt;br&gt;
  When out on the localhost arose such a clatter, &lt;br&gt;
  I sprang to the logs to see what was the matter; &lt;br&gt;
  Away to the terminal I flew like a flash, &lt;br&gt;
  Pored over the errors, typing into the bash; &lt;br&gt;
  The laptop display and the homebrew theme glow, &lt;br&gt;
  Gave a lustre of midday to the javaScript objects below, &lt;br&gt;
  When what to my wondering eyes did appear, &lt;br&gt;
  But a new direction for my career! &lt;br&gt;
  With a curriculum so lively and quick, &lt;br&gt;
  I knew in a moment that Hack Reactor was my pick. &lt;br&gt;
  More rapid than React did the sprints they came, &lt;br&gt;
  And they whistled, and shouted and invoked by name: &lt;br&gt;
  Now &lt;em&gt;Angular&lt;/em&gt;! Now &lt;em&gt;Express&lt;/em&gt;! Now &lt;em&gt;MongoDB&lt;/em&gt; and &lt;em&gt;Node&lt;/em&gt;! &lt;br&gt;
  On &lt;em&gt;D3&lt;/em&gt;! on, &lt;em&gt;Backbone&lt;/em&gt;! on &lt;em&gt;Algorithms&lt;/em&gt; and &lt;em&gt;Code&lt;/em&gt;! &lt;br&gt;
  To the top of the stack! code past that wall! &lt;br&gt;
  Now dash to the lecture! dash to the presentation! dash all! &lt;br&gt;
  As leaves before the wild hurricane fly, &lt;br&gt;
  The cohort had to be agile, and spry, &lt;br&gt;
  So through many lines of code they flew, &lt;br&gt;
  And their repos full of toys and group projects grew, &lt;br&gt;
  And then in a twinkling I heard typing from a devotee, &lt;br&gt;
  The prancing and pawing on each little key, &lt;br&gt;
  And as I was thinking in my head, and was turning around, &lt;br&gt;
  Down the lecture hall the instructor came with a bound, &lt;br&gt;
  He was dressed all in HR swag, from his head to his toe, &lt;br&gt;
  And the cohort shut their stack overflow, &lt;br&gt;
  A bundle of toy problems he had flung on his git, &lt;br&gt;
  and he wouldn’t let any in the cohort quit, &lt;br&gt;
  His eyes, how they twinkled! his attitude merry! &lt;br&gt;
  He retold that joke about the iPhone and the Blackberry, &lt;br&gt;
  He wrapped up a lecture on data structures with a bow, &lt;br&gt;
  Imparting upon us all that we would need to know&lt;/p&gt;
&lt;/blockquote&gt;</content:encoded></item><item><title>The Night Before Hack Reactor</title><description>&lt;p&gt;It is hard to express the emotions one goes through on the verge of a monumental endeavor such as Hack Reactor.   Hack Reactor is a immersive coding coding bootcamp in San Francisco that takes you from a base knowledge of coding and transforms you into an employable software engineer.   Taking&lt;/p&gt;</description><link>http://localhost:2368/the-night-before-hack-reactor/</link><guid isPermaLink="false">4e400d58-1964-4939-8742-865ad671d586</guid><category>Hack Reactor</category><dc:creator>Todd Levin</dc:creator><pubDate>Sun, 04 Oct 2015 18:00:24 GMT</pubDate><content:encoded>&lt;p&gt;It is hard to express the emotions one goes through on the verge of a monumental endeavor such as Hack Reactor.   Hack Reactor is a immersive coding coding bootcamp in San Francisco that takes you from a base knowledge of coding and transforms you into an employable software engineer.   Taking a 4 year computer science degree and condensing it to 3 months.&lt;/p&gt;

&lt;p&gt;I believe that is how diamonds are made from carbon.   A whole lot of pressure. &lt;/p&gt;

&lt;h3 id="agiledevelopment"&gt;Agile development&lt;/h3&gt;

&lt;p&gt;I didn't know about the concept of &lt;a href="https://en.wikipedia.org/wiki/Agile_software_development"&gt;agile development&lt;/a&gt; until I started looking into the Hack Reactor program.  It is a set of software development methods that focus on constant iteration on design and plan, continuous improvement and rapid response to change.&lt;/p&gt;

&lt;p&gt;The folks at Hack Reactor run the bootcamp curriculum based on this concept.  Different topics are divided into two day sprints that requires the students to deep dive into a subject, and then immediately change to something new.  That keeps people constantly learning and reacting to a fast pace environment.  The other benefit of agile development at Hack Reactor is the curriculum is never stale, it adheres to an evolutionary development mindset where change is based on weekly feedback.&lt;/p&gt;

&lt;h3 id="threemonthsremoved"&gt;Three months removed&lt;/h3&gt;

&lt;p&gt;The day at Hack Reactor runs from 9am to 8pm Monday through Saturday. If you are just doing the scheduled day a 66 hour work week would make most people pause.  Consider then that a good number of people will stay around 1-2 hours after each day for study or to catch up on the work of the current sprint.  I have never experienced a 80 hour work week, but I will have to prepare myself for it.  Family and friends, I'll see you in January.&lt;/p&gt;

&lt;h3 id="socialnetworking"&gt;Social networking&lt;/h3&gt;

&lt;p&gt;The technical skills of a software engineer are only one aspect of what Hack Reactor teaches.  The common intensive program that you and your cohort experiences builds an instant bond.  Social nights every Saturday night allows for the releasing of the stress and tension of the week as well as building on personal connections. The focus on cooperative collaboration is stressed through pair programming and group projects since in the industry, you are rarely working solo on a project.  &lt;/p&gt;

&lt;p&gt;After graduation you are part of an alumni network that rivals some universities in how focused it is in one industry.  The chance of running into a Hack Reactor graduate grows with every cohort that graduates.  Having an instant professional network of software engineers upon graduation is a benefit that I can't even fathom at this point.&lt;/p&gt;

&lt;h3 id="onefootinfrontoftheother"&gt;One foot in front of the other&lt;/h3&gt;

&lt;p&gt;Rather than look at the sheer enormity of material I will ingest over the next three months, I must look at it one day at a time, one sprint at a time and just keep going.&lt;/p&gt;

&lt;p&gt;The Chinese philosopher Lao-tzu put it best: &lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;A journey of a thousand miles begins with a single step. &lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Here's to the first step.&lt;/p&gt;</content:encoded></item><item><title>Data structures: stack in practice</title><description>&lt;p&gt;I have been looking into different data structures as I prepare for Hack Reactor and the one I would like to talk about here is a stack.  I ran across this problem on &lt;a href="http://www.coderbyte.com/CodingArea/Editor.php?ct=Bracket%20Matcher&amp;amp;lan=JavaScript"&gt;Coderbyte&lt;/a&gt; and it seems like a perfect candidate for application of this concept.&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;&lt;em&gt;Using the JavaScript language,&lt;/em&gt;&lt;/p&gt;&lt;/blockquote&gt;</description><link>http://localhost:2368/data-structures-stack/</link><guid isPermaLink="false">e208b9b9-00df-4dee-827c-559e9d7ac1d3</guid><category>JavaScript</category><dc:creator>Todd Levin</dc:creator><pubDate>Fri, 02 Oct 2015 02:20:00 GMT</pubDate><content:encoded>&lt;p&gt;I have been looking into different data structures as I prepare for Hack Reactor and the one I would like to talk about here is a stack.  I ran across this problem on &lt;a href="http://www.coderbyte.com/CodingArea/Editor.php?ct=Bracket%20Matcher&amp;amp;lan=JavaScript"&gt;Coderbyte&lt;/a&gt; and it seems like a perfect candidate for application of this concept.&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;&lt;em&gt;Using the JavaScript language, have the function BracketMatcher(str) take the str parameter being passed and return 1 if the brackets are correctly matched and each one is accounted for. Otherwise return 0. For example: if str is "(hello (world))", then the output should be 1, but if str is "((hello (world))" the the output should be 0 because the brackets do not correctly match up. Only "(" and ")" will be used as brackets. If str contains no brackets return 1.&lt;/em&gt;&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h4 id="whatisastack"&gt;What is a stack?&lt;/h4&gt;

&lt;p&gt;Think of a stack as a can of Pringles, you can add chips and remove chips from only one side. A stack is a basic linear data structure where the last value added in is the first value out.  It often is implemented as an array or a linked list since a stack only needs very basic methods to control access such as &lt;code&gt;pop()&lt;/code&gt; to remove a value and &lt;code&gt;push()&lt;/code&gt; to add a value.  The best way to examine it further is to see it in action.&lt;/p&gt;

&lt;h4 id="bracketmatcher"&gt;BracketMatcher&lt;/h4&gt;

&lt;p&gt;Let's examine what the problem asks for and why a stack is the appropriate data structure for the job.  The issue with balancing brackets is in order to properly implement, we need to keep track of them as they go since an open bracket &lt;code&gt;(&lt;/code&gt; is not always going to be followed by it's pair in the case of nested brackets as seen in the example &lt;code&gt;(hello (world))&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;Here is where a stack is good.  Each &lt;code&gt;(&lt;/code&gt; it comes across will be added to the top and is removed only when a &lt;code&gt;)&lt;/code&gt; is encountered.  A balanced string will have an empty stack at the end of it.  Let's see my solution to the problem.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;function BracketMatcher(str){
  var stack = [];
  for(var i = 0; i &amp;lt; str.length; i++){
    if(str[i] === '('){
      stack.push(str[i]);
   } else if ( str[i] === ')'){
     if(stack[stack.length-1] === '('){
       stack.pop();
     } else {
       return 0;
     }
   }
 }
 if( stack.length === 0 ){
   return 1;
 }
 return 0;
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;We initialize a stack in the form of an array and iterate across the string.  As it goes it will add and remove &lt;code&gt;(&lt;/code&gt;'s from the stack.  If all goes well we will have a balanced string indicated by an empty stack after the iteration.  If so, we have our return value of 1.&lt;/p&gt;</content:encoded></item><item><title>Four stages of competence in programming</title><description>&lt;p&gt;&lt;img src="http://localhost:2368/content/images/2015/10/Thoughts.jpg" alt=""&gt;&lt;/p&gt;

&lt;p&gt;I started learning how to code in JavaScript in early 2015 and I had no direction, instruction, or plan.  In fact I didn't even know that I wanted to learn JavaScript, I just heard of this "coding" thing on the internet.&lt;/p&gt;

&lt;p&gt;This is &lt;strong&gt;not&lt;/strong&gt; how to learn something technical.&lt;/p&gt;

&lt;h4 id="unconsciouscompetence"&gt;Unconscious&lt;/h4&gt;</description><link>http://localhost:2368/four-stages-competence/</link><guid isPermaLink="false">0f99467a-b7bb-4dfd-a644-f489bad74538</guid><category>Learn To Code</category><category>JavaScript</category><dc:creator>Todd Levin</dc:creator><pubDate>Thu, 01 Oct 2015 19:30:58 GMT</pubDate><media:content url="http://localhost:2368/content/images/2015/10/Thoughts-1.jpg" medium="image"/><content:encoded>&lt;img src="http://localhost:2368/content/images/2015/10/Thoughts-1.jpg" alt="Four stages of competence in programming"&gt;&lt;p&gt;&lt;img src="http://localhost:2368/content/images/2015/10/Thoughts.jpg" alt="Four stages of competence in programming"&gt;&lt;/p&gt;

&lt;p&gt;I started learning how to code in JavaScript in early 2015 and I had no direction, instruction, or plan.  In fact I didn't even know that I wanted to learn JavaScript, I just heard of this "coding" thing on the internet.&lt;/p&gt;

&lt;p&gt;This is &lt;strong&gt;not&lt;/strong&gt; how to learn something technical.&lt;/p&gt;

&lt;h4 id="unconsciouscompetence"&gt;Unconscious Competence&lt;/h4&gt;

&lt;p&gt;If you look at the &lt;a href="https://en.wikipedia.org/wiki/Four_stages_of_competence"&gt;four stages of competence&lt;/a&gt; model, you will start with unconscious incompetence.  You don't know a skill and don't recognize that the skill is valuable.  You can be oblivious to the entire tech industry and what a programmer actually &lt;em&gt;does.&lt;/em&gt; I spent much of my life like this.  Ignorance is bliss.&lt;/p&gt;

&lt;h4 id="consciousincompetence"&gt;Conscious Incompetence&lt;/h4&gt;

&lt;p&gt;Once you gain the understanding that you don't know a skill and you think it &lt;strong&gt;is&lt;/strong&gt; very valuable to learn, you start the process of learning.  You have now entered one of the most frustrating stages, conscious incompetence.  You want to learn, you just don't have the skills.  You stumble and make mistakes, but this is the basis of learning.&lt;/p&gt;

&lt;p&gt;Here is where most people form their base knowledge of a skill.  You could scour the online resources such as &lt;a href="http://www.codeschool.com"&gt;codeschool&lt;/a&gt;, &lt;a href="http://www.codecademy.com"&gt;codecademy&lt;/a&gt;, &lt;a href="http://www.teamtreehouse.com"&gt;treehouse&lt;/a&gt;, etc. Finding out what you &lt;strong&gt;don't&lt;/strong&gt; know is important to building a plan.  Get involved in discussions on &lt;a href="http://www.quora.com"&gt;Quora&lt;/a&gt; or &lt;a href="http://stackoverflow.com/"&gt;Stack Overflow&lt;/a&gt; to build on your knowledge.&lt;/p&gt;

&lt;h4 id="consciouscompetence"&gt;Conscious Competence&lt;/h4&gt;

&lt;p&gt;Conscious competence is the stage that people strive for; a point that with conscious thought you have knowledge of a skill.  I think of it as having enough knowledge to be 'dangerous'.  You can function professionally as a programmer at this stage, but you lack a certain level of 'optimization'.&lt;/p&gt;

&lt;h4 id="unconsciouscompetence"&gt;Unconscious Competence&lt;/h4&gt;

&lt;p&gt;Unconscious competence is the final stage of mastery in a skill.  You can code without significant concentration and thought.  This is akin to 'autopilot' with coding.  It is more often achieved through practice and persistence than any one learning resource.  &lt;/p&gt;

&lt;p&gt;In software engineering mastery of individual skills may be possible, but as a whole it is a constant learning process.  That is why I love it.&lt;/p&gt;</content:encoded></item><item><title>Overcoming Imposter Syndrome</title><description>&lt;p&gt;I believe that what my single greatest hurdle in becoming a software engineer is accepting the idea that I can be successful at it.  I started learning to code earlier this year and it was imposing to say the least.  The diverse technologies available to learn combined with how in-depth&lt;/p&gt;</description><link>http://localhost:2368/overcoming-imposter-syndrome/</link><guid isPermaLink="false">fdca5319-cc04-4cbf-ae2a-ab34932f1497</guid><category>Hack Reactor</category><dc:creator>Todd Levin</dc:creator><pubDate>Thu, 01 Oct 2015 16:47:21 GMT</pubDate><content:encoded>&lt;p&gt;I believe that what my single greatest hurdle in becoming a software engineer is accepting the idea that I can be successful at it.  I started learning to code earlier this year and it was imposing to say the least.  The diverse technologies available to learn combined with how in-depth and complicated these programming languages appeared to be made starting difficult.&lt;/p&gt;

&lt;p&gt;So I did what most people do when they don’t know where to start, I asked random people on the internet.  I found the site &lt;a href="http://www.quora.com"&gt;Quora&lt;/a&gt; which was a wealth of information from people in the industry.  Impressive credentials, with complex, intelligent answers built up my feelings of inadequacy.&lt;/p&gt;

&lt;p&gt;I started learning JavaScript with the intention of interviewing with &lt;a href="http://www.hackreactor.com"&gt;Hack Reactor&lt;/a&gt;.  I set upon learning with a passion and improved my skills rapidly.  I began solving more and more complex problems and eventually got accepted by Hack Reactor despite how highly selective they are.  Throughout this process I thought I had no chance and wasn’t good enough.&lt;/p&gt;

&lt;p&gt;I found out there is a concept that is prevalent in software engineering called the ‘&lt;a href="https://en.wikipedia.org/wiki/Imposter_syndrome"&gt;Imposter Syndrome&lt;/a&gt;’ which is a belief, despite evidence to the contrary, that success is the result of luck, timing, or the work of others.  The idea that you are a fraud amongst ‘real’ software engineers.&lt;/p&gt;

&lt;p&gt;The work I have done on the prerequisite studies for Hack Reactor and my interactions with fellow classmates made me aware that the feeling of inadequacy was fairly common.  I continue to have success that I attribute to persistence and a stubborn desire to solve the problem.  One day I hope I can acknowledge that my success is the result of technical skill.&lt;/p&gt;</content:encoded></item></channel></rss>